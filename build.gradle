import java.util.regex.Matcher
import java.util.regex.Pattern

plugins {
	id 'fabric-loom' version '1.3-SNAPSHOT'
	id 'maven-publish'
}

def targetJavaVersion = {
	Pattern snapshotPattern = Pattern.compile("(?:Snapshot )?(\\d+)w0?(0|[1-9]\\d*)([a-z])")
	Matcher snapshotMatcher = snapshotPattern.matcher(project.minecraft_version)
	String[] versionSplit = project.minecraft_version.split("\\.")
	try {
		if (versionSplit.length > 1) {
			if (Integer.parseInt(versionSplit[1]) > 17) return 17
			if (Integer.parseInt(versionSplit[1]) > 16) return 16
		} else if (snapshotMatcher.matches()) {
			int year = Integer.parseInt(snapshotMatcher.group(1))
			int week = Integer.parseInt(snapshotMatcher.group(2))

			if (year == 21 && week >= 37 || year >= 22) return 17
			if (year == 20 && week >= 45 || year >= 21) return 16
		}
	} finally {
		return 8
	}
}

sourceCompatibility = JavaVersion.toVersion(targetJavaVersion())
targetCompatibility = JavaVersion.toVersion(targetJavaVersion())

version = "${project.mod_version}+${project.minecraft_version}"
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	maven {
		url = "https://jitpack.io"
	}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "com.github.RedLime:yarn:$project.yarn_mappings:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// MixinExtras
	include(api(annotationProcessor "com.github.llamalad7.mixinextras:mixinextras-fabric:${project.mixinextras_version}"))

	// Fabric API
	include(modImplementation fabricApi.module("fabric-key-binding-api-v1", project.fabric_api_version))
	include(modImplementation fabricApi.module("fabric-resource-loader-v0", project.fabric_api_version))
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
		filter { line -> line.replace("{{MC_VERSION}}", project.minecraft_version) }
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"

	it.options.release = targetJavaVersion()
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	// withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			groupId project.maven_group
			artifactId project.archives_base_name
			version project.mod_version

			from components.java
		}
	}

	repositories {
	}
}